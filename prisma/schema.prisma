generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                       String  @id @default(cuid())
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  expires      DateTime

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model User {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  email         String    @unique
  slug          String    @unique
  emailVerified DateTime?
  name          String
  image         String?
  bio           String?

  accounts       Account[]
  sessions       Session[]
  services       Service[]
  availabilities Availability[]

  @@map("users")
}

model Service {
  id            Int    @id @default(autoincrement())
  name          String
  timeInMinutes Int

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@map("services")
}

model Availability {
  id                 Int @id @default(autoincrement())
  weekDay            Int
  startTimeInMinutes Int
  endTimeInMinutes   Int

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@map("availabilities")
}
